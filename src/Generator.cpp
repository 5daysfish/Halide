#include <fstream>
#include <set>

#include "Generator.h"
#include "Outputs.h"

namespace Halide {
namespace Internal {

namespace {

// Return true iff the name is valid for Generators or Params.
// (NOTE: gcc didn't add proper std::regex support until v4.9;
// we don't yet require this, hence the hand-rolled replacement.)

bool is_alpha(char c) { return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); }

// Note that this includes '_'
bool is_alnum(char c) { return is_alpha(c) || (c == '_') || (c >= '0' && c <= '9'); }

// Basically, a valid C identifier, except:
//
// -- initial _ is forbidden (rather than merely "reserved")
// -- two underscores in a row is also forbidden
bool is_valid_name(const std::string& n) {
    if (n.empty()) return false;
    if (!is_alpha(n[0])) return false;
    for (size_t i = 1; i < n.size(); ++i) {
        if (!is_alnum(n[i])) return false;
        if (n[i] == '_' && n[i-1] == '_') return false;
    }
    return true;
}

std::string compute_base_path(const std::string &output_dir,
                              const std::string &function_name,
                              const std::string &file_base_name) {
    std::vector<std::string> namespaces;
    std::string simple_name = extract_namespaces(function_name, namespaces);
    std::string base_path = output_dir + "/" + (file_base_name.empty() ? simple_name : file_base_name);
    return base_path;
}

std::string get_extension(const std::string& def, const GeneratorBase::EmitOptions &options) {
    auto it = options.extensions.find(def);
    if (it != options.extensions.end()) {
        return it->second;
    }
    return def;
}

Outputs compute_outputs(const Target &target,
                        const std::string &base_path,
                        const GeneratorBase::EmitOptions &options) {
    const bool is_windows_coff = target.os == Target::Windows &&
                                !target.has_feature(Target::MinGW);
    Outputs output_files;
    if (options.emit_o) {
        // If the target arch is pnacl, then the output "object" file is
        // actually a pnacl bitcode file.
        if (target.arch == Target::PNaCl) {
            output_files.object_name = base_path + get_extension(".bc", options);
        } else if (is_windows_coff) {
            // If it's windows, then we're emitting a COFF file
            output_files.object_name = base_path + get_extension(".obj", options);
        } else {
            // Otherwise it is an ELF or Mach-o
            output_files.object_name = base_path + get_extension(".o", options);
        }
    }
    if (options.emit_assembly) {
        output_files.assembly_name = base_path + get_extension(".s", options);
    }
    if (options.emit_bitcode) {
        // In this case, bitcode refers to the LLVM IR generated by Halide
        // and passed to LLVM, for both the pnacl and ordinary archs
        output_files.bitcode_name = base_path + get_extension(".bc", options);
    }
    if (options.emit_h) {
        output_files.c_header_name = base_path + get_extension(".h", options);
    }
    if (options.emit_cpp) {
        output_files.c_source_name = base_path + get_extension(".cpp", options);
    }
    if (options.emit_stmt) {
        output_files.stmt_name = base_path + get_extension(".stmt", options);
    }
    if (options.emit_stmt_html) {
        output_files.stmt_html_name = base_path + get_extension(".html", options);
    }
    if (options.emit_static_library) {
        if (is_windows_coff) {
            output_files.static_library_name = base_path + get_extension(".lib", options);
        } else {
            output_files.static_library_name = base_path + get_extension(".a", options);
        }
    }
    return output_files;
}

void compile_module_to_filter(const Module &m,
                              const std::string &base_path,
                              const GeneratorBase::EmitOptions &options) {
    Outputs output_files = compute_outputs(m.target(), base_path, options);
    m.compile(output_files);
}

Argument to_argument(const Internal::Parameter &param) {
    Expr def, min, max;
    if (!param.is_buffer()) {
        def = param.get_scalar_expr();
        min = param.get_min_value();
        max = param.get_max_value();
    }
    return Argument(param.name(),
        param.is_buffer() ? Argument::InputBuffer : Argument::InputScalar,
        param.type(), param.dimensions(), def, min, max);
}

class WrapperEmitter {
public:
    WrapperEmitter(std::ostream &dest, 
                   const std::string &fully_qualified_name,
                   const std::vector<Internal::GeneratorParamBase *>& generator_params,
                   const std::vector<Internal::GeneratorInputBase *>& inputs,
                   const std::vector<Internal::GeneratorOutputBase *>& outputs) 
        : stream(dest), fully_qualified_name(fully_qualified_name), generator_params(generator_params), 
          inputs(inputs), outputs(outputs) {
        internal_assert(!outputs.empty());
    }

    void emit();
private:
    std::ostream &stream;
    const std::string fully_qualified_name;
    const std::vector<Internal::GeneratorParamBase *> generator_params;
    const std::vector<Internal::GeneratorInputBase *> inputs;
    const std::vector<Internal::GeneratorOutputBase *> outputs;
    int indent{0};

    /** Emit spaces according to the current indentation level */
    std::string ind() {
        std::ostringstream o;
        for (int i = 0; i < indent; i++) {
            o << "  ";
        }
        return o.str();
    }
};

void WrapperEmitter::emit() {
    std::vector<std::string> namespaces = split_string(fully_qualified_name, "::");
    internal_assert(namespaces.size() >= 2);
    if (namespaces[0].empty()) {
        // We have a name like ::foo::bar::baz; omit the first empty ns.
        namespaces.erase(namespaces.begin());
        internal_assert(namespaces.size() >= 2);
    }
    const std::string class_name = namespaces.back();
    namespaces.pop_back();

    struct OutputInfo {
        std::string name;
        std::string ctype;
        std::string getter;
    };
    std::vector<OutputInfo> out_info;
    for (auto output : outputs) {
        out_info.push_back({
            output->name(),
            output->is_array() ? "std::vector<Halide::Func>" : "Halide::Func",
            output->is_array() ? "get_output_vector" : "get_output"
        });
    }

    std::ostringstream guard;
    guard << "HALIDE_WRAPPER";
    for (const auto &ns : namespaces) {
        guard << "_" << ns;
    }
    guard << "_" << class_name;

    stream << ind() << "#ifndef " << guard.str() << "\n";
    stream << ind() << "#define " << guard.str() << "\n";
    stream << "\n";

    stream << ind() << "/* MACHINE-GENERATED - DO NOT EDIT */\n";
    stream << "\n";

    stream << ind() << "#include <cassert>\n";
    stream << ind() << "#include <map>\n";
    stream << ind() << "#include <memory>\n";
    stream << ind() << "#include <string>\n";
    stream << ind() << "#include <utility>\n";
    stream << ind() << "#include <vector>\n";
    stream << "\n";
    stream << ind() << "#include \"Halide.h\"\n";
    stream << "\n";

    for (const auto &ns : namespaces) {
        stream << ind() << "namespace " << ns << " {\n";
    }
    stream << "\n";

    stream << ind() << "class " << class_name << " : public Halide::Internal::GeneratorWrapper {\n";
    stream << ind() << "public:\n";
    indent++;
    stream << ind() << "struct GeneratorParams {\n";
    indent++;
    for (auto p : generator_params) {
        if (p->name == "target") continue;
        stream << ind() << p->get_c_type() << " " << p->name << "{ " << p->get_default_value() << " };\n";
    }
    stream << "\n";

    stream << ind() << "GeneratorParams() {}\n";
    stream << "\n";
    stream << ind() << "std::map<std::string, std::string> to_map() const {\n";
    indent++;
    stream << ind() << "std::map<std::string, std::string> m;\n";
    for (auto p : generator_params) {
        if (p->name == "target") continue;
        stream << ind() << "if (" << p->name << " != " << p->get_default_value() << ") "
                        << "m[\"" << p->name << "\"] = " << p->call_to_string(p->name) << ";\n";
    }
    stream << ind() << "return m;\n";
    indent--;
    stream << ind() << "}\n";
    stream << "\n";

    stream << ind() << "GeneratorParams(const GeneratorParams&) = delete;\n";
    stream << ind() << "void operator=(const GeneratorParams&) = delete;\n";
    indent--;
    stream << ind() << "};\n";
    stream << "\n";


    stream << ind() << "// default ctor\n";
    stream << ind() << class_name << "() {}\n";
    stream << "\n";

    stream << ind() << "// ctor with inputs\n";
    stream << ind() << class_name << "(\n";
    indent++;
    stream << ind() << "const Halide::GeneratorContext& context,\n";
    for (auto input : inputs) {
        std::string type(input->kind() == IOKind::Function ? "Halide::Func" : "Halide::Expr");
        if (input->is_array()) {
            type = "const std::vector<" + type + ">&";
        }
        stream << ind() << type << " " << input->name() << ",\n";
    }
    stream << ind() << "const GeneratorParams& params = GeneratorParams()\n";
    indent--;
    stream << ind() << ")\n";
    indent++;
    stream << ind() << ": GeneratorWrapper(context, &factory, params.to_map(), {\n";
    indent++;
    for (size_t i = 0; i < inputs.size(); ++i) {
        stream << ind() << "Halide::Internal::to_func_or_expr_vector(" << inputs[i]->name() << ")";
        stream << ",\n";
    }
    indent--;
    stream << ind() << " })\n";
    for (const auto &out : out_info) {
        stream << ind() << ", " << out.name << "(" << out.getter << "(\"" << out.name << "\"))\n";
    }
    indent--;
    stream << ind() << "{\n";
    stream << ind() << "}\n";
    stream << "\n";

    stream << ind() << "// move constructor\n";
    stream << ind() << class_name << "("<< class_name << "&& that) : GeneratorWrapper(std::move(that)) {\n";
    indent++;
    for (const auto &out : out_info) {
        stream << ind() << "*const_cast<" << out.ctype << "*>(&" << out.name << ") = "
            << "std::move(*const_cast<" << out.ctype << "*>(&that." << out.name << "));\n";
    }
    indent--;
    stream << ind() << "}\n";
    stream << "\n";

    stream << ind() << "// move assignment operator\n";
    stream << ind() << class_name << "& operator=("<< class_name << "&& that) {\n";
    indent++;
    stream << ind() << "GeneratorWrapper::operator=(std::move(that));\n";
    for (const auto &out : out_info) {
        stream << ind() << "*const_cast<" << out.ctype << "*>(&" << out.name << ") = "
            << "std::move(*const_cast<" << out.ctype << "*>(&that." << out.name << "));\n";
    }
    stream << ind() << "return *this;\n";
    indent--;
    stream << ind() << "}\n";
    stream << "\n";

    stream << ind() << "// Output(s)\n";
    stream << ind() << "// TODO: identify vars used\n";
    for (auto output : outputs) {
        if (output->is_array()) {
            stream << ind() << "const std::vector<Halide::Func> " << output->name() << ";\n";
        } else {
            stream << ind() << "const Halide::Func " << output->name() << ";\n";
        }
    }
    stream << "\n";

    indent--;
    stream << ind() << "private:\n";
    indent++;
    stream << ind() << "static std::unique_ptr<Halide::Internal::GeneratorBase> factory(const std::map<std::string, std::string>& params) {\n";
    indent++;
    stream << ind() << "auto g = Halide::Internal::RegisterGeneratorAndWrapper<" << class_name << ">::create();\n";
    stream << ind() << "g->set_generator_param_values(params);\n";
    stream << ind() << "return g;\n";
    indent--;
    stream << ind() << "};\n";
    stream << "\n";

    indent--;
    stream << ind() << "};\n";
    stream << "\n";

    for (int i = (int)namespaces.size() - 1; i >= 0 ; --i) {
        stream << ind() << "}  // namespace " << namespaces[i] << "\n";
    }
    stream << "\n";

    stream << ind() << "#endif  // " << guard.str() << "\n";
}

}  // namespace

const std::map<std::string, Halide::Type> &get_halide_type_enum_map() {
    static const std::map<std::string, Halide::Type> halide_type_enum_map{
        {"bool", Halide::Bool()},
        {"int8", Halide::Int(8)},
        {"int16", Halide::Int(16)},
        {"int32", Halide::Int(32)},
        {"uint8", Halide::UInt(8)},
        {"uint16", Halide::UInt(16)},
        {"uint32", Halide::UInt(32)},
        {"float32", Halide::Float(32)},
        {"float64", Halide::Float(64)}
    };
    return halide_type_enum_map;
}

std::string halide_type_to_enum_string(const Halide::Type & t) {
    auto enum_map = get_halide_type_enum_map();
    for (auto key_value : enum_map) {
        if (t == key_value.second) {
            return key_value.first;
        }
    }
    user_error << "Type value not found: " << t;
    return "";
}

int generate_filter_main(int argc, char **argv, std::ostream &cerr) {
    const char kUsage[] = "gengen [-g GENERATOR_NAME] [-f FUNCTION_NAME] [-o OUTPUT_DIR] [-r RUNTIME_NAME] [-e EMIT_OPTIONS] [-x EXTENSION_OPTIONS] [-n FILE_BASE_NAME] "
                          "target=target-string[,target-string...] [generator_arg=value [...]]\n\n"
                          "  -e  A comma separated list of files to emit. Accepted values are "
                          "[assembly, bitcode, cpp, h, html, o, static_library, stmt, wrapper]. If omitted, default value is [static_library, h].\n"
                          "  -x  A comma separated list of file extension pairs to substitute during file naming, "
                          "in the form [.old=.new[,.old2=.new2]]\n";

    std::map<std::string, std::string> flags_info = { { "-f", "" },
                                                      { "-g", "" },
                                                      { "-o", "" },
                                                      { "-e", "" },
                                                      { "-n", "" },
                                                      { "-x", "" },
                                                      { "-r", "" }};
    std::map<std::string, std::string> generator_args;

    for (int i = 1; i < argc; ++i) {
        if (argv[i][0] != '-') {
            std::vector<std::string> v = split_string(argv[i], "=");
            if (v.size() != 2 || v[0].empty() || v[1].empty()) {
                cerr << kUsage;
                return 1;
            }
            generator_args[v[0]] = v[1];
            continue;
        }
        auto it = flags_info.find(argv[i]);
        if (it != flags_info.end()) {
            if (i + 1 >= argc) {
                cerr << kUsage;
                return 1;
            }
            it->second = argv[i + 1];
            ++i;
            continue;
        }
        cerr << "Unknown flag: " << argv[i] << "\n";
        cerr << kUsage;
        return 1;
    }

    std::string runtime_name = flags_info["-r"];

    std::vector<std::string> generator_names = GeneratorRegistry::enumerate();
    if (generator_names.size() == 0 && runtime_name.empty()) {
        cerr << "No generators have been registered and not compiling a standalone runtime\n";
        cerr << kUsage;
        return 1;
    }

    std::string generator_name = flags_info["-g"];
    if (generator_name.empty() && runtime_name.empty()) {
        // If -g isn't specified, but there's only one generator registered, just use that one.
        if (generator_names.size() > 1) {
            cerr << "-g must be specified if multiple generators are registered:\n";
            for (auto name : generator_names) {
                cerr << "    " << name << "\n";
            }
            cerr << kUsage;
            return 1;
        }
        generator_name = generator_names[0];
    }
    std::string function_name = flags_info["-f"];
    if (function_name.empty()) {
        // If -f isn't specified, assume function name = generator name.
        function_name = generator_name;
    }
    std::string output_dir = flags_info["-o"];
    if (output_dir.empty()) {
        cerr << "-o must always be specified.\n";
        cerr << kUsage;
        return 1;
    }

    // It's ok to omit "target=" if we are generating *only* a wrapper
    const std::vector<std::string> emit_flags = split_string(flags_info["-e"], ",");
    if (!(emit_flags.size() == 1 && emit_flags[0] == "wrapper")) {
        if (generator_args.find("target") == generator_args.end()) {
            cerr << "Target missing\n";
            cerr << kUsage;
            return 1;
        }
    }

    // it's OK for file_base_name to be empty: filename will be based on function name
    std::string file_base_name = flags_info["-n"];

    GeneratorBase::EmitOptions emit_options;
    // Ensure all flags start as false.
    emit_options.emit_static_library = emit_options.emit_h = false;

    if (emit_flags.empty() || (emit_flags.size() == 1 && emit_flags[0].empty())) {
        // If omitted or empty, assume .a and .h
        emit_options.emit_static_library = emit_options.emit_h = true;
    } else {
        // If anything specified, only emit what is enumerated
        for (const std::string &opt : emit_flags) {
            if (opt == "assembly") {
                emit_options.emit_assembly = true;
            } else if (opt == "bitcode") {
                emit_options.emit_bitcode = true;
            } else if (opt == "stmt") {
                emit_options.emit_stmt = true;
            } else if (opt == "html") {
                emit_options.emit_stmt_html = true;
            } else if (opt == "cpp") {
                emit_options.emit_cpp = true;
            } else if (opt == "o") {
                emit_options.emit_o = true;
            } else if (opt == "h") {
                emit_options.emit_h = true;
            } else if (opt == "static_library") {
                emit_options.emit_static_library = true;
            } else if (opt == "wrapper") {
                emit_options.emit_wrapper = true;
            } else if (!opt.empty()) {
                cerr << "Unrecognized emit option: " << opt
                     << " not one of [assembly, bitcode, cpp, h, html, o, static_library, stmt, wrapper], ignoring.\n";
            }
        }
    }

    auto extension_flags = split_string(flags_info["-x"], ",");
    for (const std::string &x : extension_flags) {
        if (x.empty()) {
            continue;
        }
        auto ext_pair = split_string(x, "=");
        if (ext_pair.size() != 2) {
            cerr << "Malformed -x option: " << x << "\n";
            cerr << kUsage;
            return 1;
        }
        emit_options.extensions[ext_pair[0]] = ext_pair[1];
    }

    const auto target_string = generator_args["target"];
    auto target_strings = split_string(target_string, ",");
    std::vector<Target> targets;
    for (const auto &s : target_strings) {
        targets.push_back(Target(s));
    }

    if (!runtime_name.empty()) {
        if (targets.size() != 1) {
            cerr << "Only one target allowed here";
            return 1;
        }
        std::string base_path = compute_base_path(output_dir, runtime_name, "");
        Outputs output_files = compute_outputs(targets[0], base_path, emit_options);
        compile_standalone_runtime(output_files, targets[0]);
    }

    if (!generator_name.empty()) {
        std::string base_path = compute_base_path(output_dir, function_name, file_base_name);
        debug(1) << "Generator " << generator_name << " has base_path " << base_path << "\n";
        if (emit_options.emit_wrapper) {
            // When generating wrapper, we ignore all generator args passed in, and supply a fake Target.
            std::map<std::string, std::string> wrapper_generator_args;
            // TODO Target() doesn't roundtrip
            wrapper_generator_args["target"] = Target(Target::OSUnknown, Target::ArchUnknown, 64).to_string();
            auto gen = GeneratorRegistry::create(generator_name, wrapper_generator_args);
            if (gen == nullptr) {
                cerr << "Unknown generator: " << generator_name << "\n";
                exit(1);
            }
            auto wrapper_file_path = base_path + get_extension(".wrapper.h", emit_options);
            gen->emit_wrapper(wrapper_file_path);
        }

        Outputs output_files = compute_outputs(targets[0], base_path, emit_options);
        auto module_producer = [&generator_name, &generator_args, &cerr]
            (const std::string &name, const Target &target) -> Module {
                auto sub_generator_args = generator_args;
                sub_generator_args["target"] = target.to_string();
                // Must re-create each time since each instance will have a different Target
                auto gen = GeneratorRegistry::create(generator_name, sub_generator_args);
                if (gen == nullptr) {
                    cerr << "Unknown generator: " << generator_name << "\n";
                    exit(1);
                }
                return gen->build_module(name);
            };
        if (targets.size() > 1) {
            compile_multitarget(function_name, output_files, targets, module_producer);
        } else {
            // compile_multitarget() will fail if we request anything but library and/or header,
            // so defer directly to Module::compile if there is a single target.
            module_producer(function_name, targets[0]).compile(output_files);
        }
    }

    return 0;
}

GeneratorParamBase::GeneratorParamBase(const std::string &name) : name(name) {
    ObjectInstanceRegistry::register_instance(this, 0, ObjectInstanceRegistry::GeneratorParam,
                                              this, nullptr);
}

GeneratorParamBase::~GeneratorParamBase() { ObjectInstanceRegistry::unregister_instance(this); }

/* static */
GeneratorRegistry &GeneratorRegistry::get_registry() {
    static GeneratorRegistry *registry = new GeneratorRegistry;
    return *registry;
}

/* static */
void GeneratorRegistry::register_factory(const std::string &name,
                                         std::unique_ptr<GeneratorFactory> factory) {
    for (auto n : split_string(name, "::")) {
        user_assert(is_valid_name(n)) << "Invalid Generator name part: " << n;
    }
    GeneratorRegistry &registry = get_registry();
    std::lock_guard<std::mutex> lock(registry.mutex);
    internal_assert(registry.factories.find(name) == registry.factories.end())
        << "Duplicate Generator name: " << name;
    registry.factories[name] = std::move(factory);
}

/* static */
void GeneratorRegistry::unregister_factory(const std::string &name) {
    GeneratorRegistry &registry = get_registry();
    std::lock_guard<std::mutex> lock(registry.mutex);
    internal_assert(registry.factories.find(name) != registry.factories.end())
        << "Generator not found: " << name;
    registry.factories.erase(name);
}

/* static */
std::unique_ptr<GeneratorBase> GeneratorRegistry::create(const std::string &name,
                                                         const GeneratorParamValues &params) {
    GeneratorRegistry &registry = get_registry();
    std::lock_guard<std::mutex> lock(registry.mutex);
    auto it = registry.factories.find(name);
    user_assert(it != registry.factories.end()) << "Generator not found: " << name << "\n";
    return it->second->create(params);
}

/* static */
std::vector<std::string> GeneratorRegistry::enumerate() {
    GeneratorRegistry &registry = get_registry();
    std::lock_guard<std::mutex> lock(registry.mutex);
    std::vector<std::string> result;
    for (const auto& i : registry.factories) {
        result.push_back(i.first);
    }
    return result;
}

GeneratorBase::GeneratorBase(size_t size, const void *introspection_helper) 
    : size(size) {
    ObjectInstanceRegistry::register_instance(this, size, ObjectInstanceRegistry::Generator, this, introspection_helper);
}

GeneratorBase::~GeneratorBase() { 
    ObjectInstanceRegistry::unregister_instance(this); 
}

void GeneratorBase::rebuild_params() {
    params_built = false;
    filter_inputs.clear();
    filter_outputs.clear();
    filter_params.clear();
    generator_params.clear();
    build_params();
}

void GeneratorBase::build_params() {
    if (!params_built) {
        std::set<std::string> names;
        std::vector<void *> vf = ObjectInstanceRegistry::instances_in_range(
            this, size, ObjectInstanceRegistry::FilterParam);
        for (auto v : vf) {
            auto param = static_cast<Parameter *>(v);
            internal_assert(param != nullptr);
            user_assert(param->is_explicit_name()) << "Params in Generators must have explicit names: " << param->name();
            user_assert(is_valid_name(param->name())) << "Invalid Param name: " << param->name();
            user_assert(!names.count(param->name())) << "Duplicate Param name: " << param->name();
            names.insert(param->name());
            filter_params.push_back(param);
        }

        std::vector<void *> vi = ObjectInstanceRegistry::instances_in_range(
            this, size, ObjectInstanceRegistry::GeneratorInput);
        for (auto v : vi) {
            auto input = static_cast<Internal::GeneratorInputBase *>(v);
            internal_assert(input != nullptr);
            user_assert(is_valid_name(input->name())) << "Invalid Input name: (" << input->name() << ")\n";
            user_assert(!names.count(input->name())) << "Duplicate Input name: " << input->name();
            names.insert(input->name());
            filter_inputs.push_back(input);
        }

        std::vector<void *> vo = ObjectInstanceRegistry::instances_in_range(
            this, size, ObjectInstanceRegistry::GeneratorOutput);
        for (auto v : vo) {
            auto output = static_cast<Internal::GeneratorOutputBase *>(v);
            internal_assert(output != nullptr);
            user_assert(is_valid_name(output->name())) << "Invalid Output name: (" << output->name() << ")\n";
            user_assert(!names.count(output->name())) << "Duplicate Output name: " << output->name();
            names.insert(output->name());
            filter_outputs.push_back(output);
        }

        if (filter_params.size() > 0 && filter_inputs.size() > 0) {
            user_error << "Input<> may not be used with Param<> or ImageParam in Generators.\n";
        }

        if (filter_params.size() > 0 && filter_outputs.size() > 0) {
            user_error << "Output<> may not be used with Param<> or ImageParam in Generators.\n";
        }

        if (filter_inputs.size() > 0 && filter_outputs.size() == 0) {
            // This doesn't catch *every* possibility (since a Generator can have zero Inputs).
            user_error << "Output<> must be used with Input<> in Generators.\n";
        }

        std::vector<void *> vg = ObjectInstanceRegistry::instances_in_range(
            this, size, ObjectInstanceRegistry::GeneratorParam);
        for (auto v : vg) {
            auto param = static_cast<GeneratorParamBase *>(v);
            internal_assert(param != nullptr);
            user_assert(is_valid_name(param->name)) << "Invalid GeneratorParam name: " << param->name;
            user_assert(!names.count(param->name)) << "Duplicate GeneratorParam name: " << param->name;
            names.insert(param->name);
            generator_params.push_back(param);
        }
        params_built = true;
    }
}

Func GeneratorBase::get_first_output() {
    build_params();
    return get_output(filter_outputs[0]->name());
}

Func GeneratorBase::get_output(const std::string &n) {
    user_assert(generate_called) << "Must call generate() before accessing Generator outputs."; 
    // There usually are very few outputs, so a linear search is fine
    build_params();
    for (auto output : filter_outputs) {
        if (output->name() == n) {
            user_assert(!output->is_array() && output->value_size() == 1) << "Output " << n << " must be accessed via get_output_vector()\n";
            Func f = output->value().func();
            user_assert(f.defined()) << "Output " << n << " was not defined.\n";
            return f;
        }
    }
    internal_error << "Output " << n << " not found.\n";
    return Func();
}

std::vector<Func> GeneratorBase::get_output_vector(const std::string &n) {
    user_assert(generate_called) << "Must call generate() before accessing Generator outputs."; 
    // There usually are very few outputs, so a linear search is fine
    build_params();
    for (auto output : filter_outputs) {
        if (output->name() == n) {
            // Actually, it's fine to access non-array outputs this way.
            // internal_assert(output->is_array())  << "Output " << n << " must be accessed via get_output()";
            std::vector<Func> funcs;
            for (const auto &f : output->values_) {
                user_assert(f.func().defined()) << "Output " << n << " was not fully defined.\n";
                funcs.push_back(f.func());
            }
            return funcs;
        }
    }
    internal_error << "Output " << n << " not found.\n";
    return {};
}

std::vector<Argument> GeneratorBase::get_filter_arguments() {
    build_params();
    init_inputs_and_outputs();  // TODO(srj): not sure if we need this, unlikely we do
    std::vector<Argument> arguments;
    for (auto param : filter_params) {
        arguments.push_back(to_argument(*param));
    }
    for (auto input : filter_inputs) {
        for (const auto &p : input->parameters_) {
            arguments.push_back(to_argument(p));
        }
    }
    return arguments;
}

GeneratorParamValues GeneratorBase::get_generator_param_values() {
    build_params();
    GeneratorParamValues results;
    for (auto param : generator_params) {
        results[param->name] = param->to_string();
    }
    return results;
}

void GeneratorBase::set_generator_param_values(const GeneratorParamValues &params) {
    build_params();
    std::map<std::string, GeneratorParamBase *> m;
    for (auto param : generator_params) {
        m[param->name] = param;
    }
    for (auto key_value : params) {
        const std::string &key = key_value.first;
        const std::string &value = key_value.second;
        auto p = m.find(key);
        user_assert(p != m.end()) << "Generator has no GeneratorParam named: " << key;
        p->second->from_string(value);
    }
}

void GeneratorBase::set_inputs(const std::vector<std::vector<FuncOrExpr>> &inputs) {
    internal_assert(!inputs_set);
    build_params();
    user_assert(inputs.size() == filter_inputs.size()) 
            << "Expected exactly " << filter_inputs.size() 
            << " inputs but got " << inputs.size() << "\n";
    for (size_t i = 0; i < filter_inputs.size(); ++i) {
        filter_inputs[i]->set_inputs(inputs[i]);
    }
    inputs_set = true;
}

void GeneratorBase::init_inputs_and_outputs() {
    if (!inputs_set) {
        for (auto input : filter_inputs) {
            input->init_internals();
        }
        inputs_set = true;
    }
    for (auto output : filter_outputs) {
        output->init_internals();
    }
}

void GeneratorBase::pre_build() {
    user_assert(filter_inputs.size() == 0) << "May not use build() method with Input<>.";
    user_assert(filter_outputs.size() == 0) << "May not use build() method with Output<>.";
}

void GeneratorBase::pre_generate() {
    user_assert(filter_params.size() == 0) << "May not use generate() method with Param<> or ImageParam.";
    user_assert(filter_outputs.size() > 0) << "Must use Output<> with generate() method.";
    init_inputs_and_outputs();
}

Pipeline GeneratorBase::produce_pipeline() {
    user_assert(filter_outputs.size() > 0) << "Must use produce_pipeline<> with Output<>.";
    std::vector<Func> funcs;
    for (auto output : filter_outputs) {
        for (const auto &v : output->values_) {
            Func f = v.func();
            user_assert(f.defined()) << "Output \"" << f.name() << "\" was not defined.\n";
            user_assert(f.dimensions() == output->dimensions()) << "Output \"" << f.name() 
                << "\" requires dimensions=" << output->dimensions() 
                << " but was defined as dimensions=" << f.dimensions() << ".\n";
            user_assert((int)f.outputs() == (int)output->type_size()) << "Output \"" << f.name() 
                    << "\" requires a Tuple of size " << output->type_size() 
                    << " but was defined as Tuple of size " << f.outputs() << ".\n";
            for (size_t i = 0; i < f.output_types().size(); ++i) {
                Type expected = output->type_at(i);
                Type actual = f.output_types()[i];
                user_assert(expected == actual) << "Output \"" << f.name() 
                    << "\" requires type " << expected 
                    << " but was defined as type " << actual << ".\n";
            }
            funcs.push_back(f);
        }
    }
    return Pipeline(funcs);
}

std::vector<Argument> GeneratorBase::get_filter_output_types() {
    std::vector<Argument> output_types;
    Pipeline pipeline = build_pipeline();
    std::vector<Func> pipeline_results = pipeline.outputs();
    for (Func func : pipeline_results) {
        for (Halide::Type t : func.output_types()) {
            std::string name = "result_" + std::to_string(output_types.size());
            output_types.push_back(Halide::Argument(name, Halide::Argument::OutputBuffer, t, func.dimensions()));
        }
    }
    return output_types;
}

Module GeneratorBase::build_module(const std::string &function_name,
                                   const LoweredFunc::LinkageType linkage_type) {
    build_params();
    Pipeline pipeline = build_pipeline();
    // Building the pipeline may mutate the Params/ImageParams (but not Inputs).
    if (filter_params.size() > 0) {
        rebuild_params();
    }
    return pipeline.compile_to_module(get_filter_arguments(), function_name, target, linkage_type);
}

void GeneratorBase::emit_wrapper(const std::string &wrapper_file_path) {
    user_assert(!wrapper_class_name.empty()) << "Generator has no wrapper class\n";
    build_params();
    std::ofstream file(wrapper_file_path);
    WrapperEmitter emit(file, wrapper_class_name, generator_params, filter_inputs, filter_outputs);
    emit.emit();
}

void GeneratorBase::emit_filter(const std::string &output_dir,
                                const std::string &function_name,
                                const std::string &file_base_name,
                                const EmitOptions &options) {
    std::string base_path = compute_base_path(output_dir, function_name, file_base_name);
    if (options.emit_wrapper) {
        auto wrapper_name = base_path + get_extension(".wrapper.h", options);
        emit_wrapper(wrapper_name);
    }
    compile_module_to_filter(build_module(function_name), base_path, options);
}

GIOBase::GIOBase(const ArraySizeArg &array_size, 
                 const std::string &name, 
                 IOKind kind,             
                 const std::vector<TypeArg> &types,
                 const DimensionArg &dimensions,
                 bool is_array) 
    : array_size_(array_size), is_array_(is_array), name_(name), kind_(kind), types_(types), dimensions_(dimensions) {
    user_assert(array_size_.value() >= 0) << "Generator Input/Output Arrays must have positive size.";
}

GIOBase::~GIOBase() { 
    // nothing
}

void GIOBase::verify_internals() const {
    user_assert(array_size_.value() >= 0) << "Generator Input/Output Arrays must have positive values";
    user_assert(dimensions_.value() >= 0) << "Generator Input/Output Dimensions must have positive values";

    user_assert(values_.size() == (size_t)array_size_.value()) << "Expected value_size() == " 
        << array_size_.value() << ", saw " << values_.size() << " for " << name() << "\n";;
    for (const FuncOrExpr &v : values_) {
        user_assert(v.kind() == kind()) << "Input/Ouput " << name() << " is not of the expected type.\n";
        if (kind() == IOKind::Function) {
            Func f = v.func();
            user_assert(f.defined()) << "Input/Ouput " << name() << " is not defined.\n";
            user_assert(f.dimensions() == dimensions()) 
                << "Expected dimensions " << dimensions() 
                << " but got " << f.dimensions()
                << " for " << name() << "\n";
            user_assert(f.outputs() == 1)
                << "Expected outputs() == " << 1 
                << " but got " << f.outputs()
                << " for " << name() << "\n";
            user_assert(f.output_types().size() == 1)
                << "Expected output_types().size() == " << 1 
                << " but got " << f.outputs()
                << " for " << name() << "\n";
            user_assert(f.output_types()[0] == type()) 
                << "Expected type " << type() 
                << " but got " << f.output_types()[0] 
                << " for " << name() << "\n";
        } else {
            Expr e = v.expr();
            user_assert(e.defined()) << "Input/Ouput " << name() << " is not defined.\n";
            user_assert(e.type() == type())
                << "Expected type " << type() 
                << " but got " << e.type()
                << " for " << name() << "\n";
        }
    }
}

std::string GIOBase::array_name(size_t i) const {
    std::string n = name();
    if (is_array()) {
        n += "_" + std::to_string(i);
    }
    return n;
}

GeneratorInputBase::GeneratorInputBase(const ArraySizeArg &array_size,
                                       const std::string &name, 
                                       IOKind kind, 
                                       const TypeArg &t, 
                                       const DimensionArg &d,
                                       bool is_array) 
    : GIOBase(array_size, name, kind, {t}, d, is_array) {
    ObjectInstanceRegistry::register_instance(this, 0, ObjectInstanceRegistry::GeneratorInput, this, nullptr);
}

GeneratorInputBase::~GeneratorInputBase() { 
    ObjectInstanceRegistry::unregister_instance(this); 
}

void GeneratorInputBase::init_parameters() {
    parameters_.clear();
    for (int i = 0; i < array_size_.value(); ++i) {
        parameters_.emplace_back(type(), kind() == IOKind::Function, dimensions(), array_name(i), true, false);
    }
    set_def_min_max();
}

void GeneratorInputBase::verify_internals() const {
    GIOBase::verify_internals();

    user_assert(parameters_.size() == values_.size()) << "Expected parameters_.size() == " 
        << values_.size() << ", saw " << parameters_.size() << " for " << name() << "\n";
}

void GeneratorInputBase::init_internals() {
    init_parameters();

    values_.clear();
    for (int i = 0; i < array_size_.value(); ++i) {
        if (kind() == IOKind::Function) {
            std::vector<Var> args;
            std::vector<Expr> args_expr;
            for (int i = 0; i < dimensions(); ++i) {
                Var v = Var::implicit(i);
                args.push_back(v);
                args_expr.push_back(v);
            }
            Func f = Func(array_name(i) + "_im");
            f(args) = Internal::Call::make(parameters_[i], args_expr);
            values_.push_back(FuncOrExpr(f));
        } else {
            Expr e = Internal::Variable::make(type(), array_name(i), parameters_[i]);
            values_.push_back(FuncOrExpr(e));
        }
    }
    
    verify_internals();
}

void GeneratorInputBase::set_inputs(const std::vector<FuncOrExpr> &inputs) {
    // must re-init parameters in case some GeneratorParams changed, since
    // it can affect the expected length of parameters_.
    init_parameters();

    values_.clear();
    user_assert(inputs.size() == (size_t)array_size_.value()) << "Expected inputs.size() == " 
        << array_size_.value() << ", saw " << inputs.size() << " for " << name() << "\n";
    for (const FuncOrExpr & i : inputs) {
        user_assert(i.kind() == kind()) << "An input for " << name() << " is not of the expected kind.\n";
        values_.push_back(i);
    }
    
    verify_internals();
}

GeneratorOutputBase::GeneratorOutputBase(const ArraySizeArg &array_size, const std::string &name, const std::vector<TypeArg> &t, const DimensionArg &d, bool is_array) 
    : GIOBase(array_size, name, IOKind::Function, t, d, is_array) {
    ObjectInstanceRegistry::register_instance(this, 0, ObjectInstanceRegistry::GeneratorOutput,
                                              this, nullptr);
}

GeneratorOutputBase::~GeneratorOutputBase() { 
    ObjectInstanceRegistry::unregister_instance(this); 
}

void GeneratorOutputBase::init_internals() {
    values_.clear();
    for (int i = 0; i < array_size_.value(); ++i) {
        values_.push_back(Func(array_name(i)));
    }
}

void generator_test() {
    GeneratorParam<int> gp("gp", 1);

    // Verify that RDom parameter-pack variants can convert GeneratorParam to Expr
    RDom rdom(0, gp, 0, gp);

    // Verify that Func parameter-pack variants can convert GeneratorParam to Expr
    Var x, y;
    Func f, g;
    f(x, y) = x + y;
    g(x, y) = f(gp, gp);                            // check Func::operator() overloads
    g(rdom.x, rdom.y) += f(rdom.x, rdom.y);
    g.update(0).reorder(rdom.y, rdom.x);            // check Func::reorder() overloads for RDom::operator RVar()

    // Verify that print() parameter-pack variants can convert GeneratorParam to Expr
    print(f(0, 0), g(1, 1), gp);
    print_when(true, f(0, 0), g(1, 1), gp);

    // Verify that Tuple parameter-pack variants can convert GeneratorParam to Expr
    Tuple t(gp, gp, gp);
}

}  // namespace Internal
}  // namespace Halide
